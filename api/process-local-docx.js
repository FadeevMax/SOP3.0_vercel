// Process the local DOCX file to generate proper chunks like the original Python app
// This reads the existing semantic_chunks.json that was generated by the Python app

const fs = require('fs');
const path = require('path');

export default async function handler(req, res) {
    // Set CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }
    
    if (req.method !== 'POST') {
        res.status(405).json({ error: 'Method not allowed' });
        return;
    }
    
    try {
        console.log('🔄 Processing local DOCX file data...');
        
        // Path to the semantic chunks generated by the original Python app  
        const chunksPath = path.join(process.cwd(), 'semantic_chunks.json');
        const imagesDir = path.join(process.cwd(), '..', 'semantic_output', 'images');
        
        // Check if the semantic chunks file exists
        if (!fs.existsSync(chunksPath)) {
            console.log('❌ Semantic chunks file not found, using fallback');
            return res.status(404).json({
                error: 'Processed chunks not found',
                details: 'Run the Python app first to generate semantic_chunks.json',
                fallback: 'Using simple endpoint instead'
            });
        }
        
        // Read the semantic chunks
        const chunksData = fs.readFileSync(chunksPath, 'utf8');
        const chunks = JSON.parse(chunksData);
        
        // Check images directory
        let imageFiles = [];
        if (fs.existsSync(imagesDir)) {
            imageFiles = fs.readdirSync(imagesDir).filter(file => file.endsWith('.png'));
        }
        
        console.log(`✅ Loaded ${chunks.length} chunks with ${imageFiles.length} images`);
        
        // Create response in the same format as google-docs-simple
        const response = {
            success: true,
            document: {
                id: 'local-docx-file',
                name: 'GTI Data Base and SOP (Local DOCX)',
                modifiedTime: new Date().toISOString(),
                size: chunks.length.toString(),
                version: 'local-processed'
            },
            chunks: chunks.map(chunk => ({
                ...chunk,
                // Update image paths to be web-accessible if they exist
                images: chunk.images ? chunk.images.map(img => ({
                    ...img,
                    path: img.path || `/images/${img.filename}`,
                    url: `https://raw.githubusercontent.com/FadeevMax/SOP3.0_vercel/main/semantic_output/images/${img.filename}`
                })) : []
            })),
            metadata: {
                chunkCount: chunks.length,
                imageCount: imageFiles.length,
                source: 'local_docx_processing',
                lastUpdate: new Date().toISOString(),
                note: `Real GTI SOP data from processed DOCX file with ${chunks.length} chunks and ${imageFiles.length} images`,
                processingMethod: 'python_docx_chunker',
                originalPath: 'Live_GTI_SOP.docx'
            }
        };
        
        console.log(`🎉 Successfully loaded real SOP data: ${chunks.length} chunks, ${imageFiles.length} images`);
        
        res.status(200).json(response);
        
    } catch (error) {
        console.error('Local DOCX processing error:', error);
        res.status(500).json({ 
            error: 'Failed to process local DOCX data',
            details: error.message,
            fallback: 'Try using the google-docs-simple endpoint instead'
        });
    }
}